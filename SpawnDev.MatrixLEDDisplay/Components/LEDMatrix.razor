@using SpawnDev.BlazorJS
@using SpawnDev.BlazorJS.JSObjects
@using SpawnDev.MatrixLEDDisplay.ImageTools

<div style="@Style">
    <canvas style="border: 1px solid grey;" @ref=_canvasRef></canvas>
</div>

@code {
    [Inject]
    BlazorJSRuntime JS { get; set; } = default!;

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public RGBImage Data { get; set; } = new RGBImage(16, 16);

    ElementReference _canvasRef;

    HTMLCanvasElement? _canvas;
    CanvasRenderingContext2D? _ctx;

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseEvent { get; set; }

    int _blockSize = 0;
    int _canvasSize = 320;
    string _boxBorderColor = "black";
    int _pixelWidth = 16;
    int _pixelHeight = 16;

    void DrawData()
    {
        var width = Data.Width * _blockSize;
        var height = Data.Height * _blockSize;
        _canvas!.Width = width;
        _canvas.Height = height;
        Data.ForEachXY((x, y) =>
        {
            var color = Data[x, y];
            var i = y * _pixelWidth + x;
            var x1 = x * _blockSize;
            var y1 = y * _blockSize;
            _ctx!.FillStyle = color.HexColor;
            _ctx.FillRect(x1, y1, _blockSize, _blockSize);
            var strokeColor = Convert.ToHexString(new byte[] { 0, 0, 0, 128 });
            _ctx.StrokeStyle = $"#{strokeColor}";
            _ctx.StrokeRect(x1, y1, _blockSize, _blockSize);
        });
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _canvas = new HTMLCanvasElement(_canvasRef);
            _ctx = _canvas.Get2DContext(new CanvasRenderingContext2DSettings { WillReadFrequently = true });
            _blockSize = (int)Math.Floor(_canvasSize / (double)_pixelWidth);
            _canvasSize = (int)(_blockSize * _pixelWidth); // 16 blocks + 1 pixel border between each block
            _canvas.Width = _canvasSize;
            _canvas.Height = _canvasSize;
        }
        DrawData();
    }
}
