@page "/"
@using SpawnDev.BlazorJS
@using SpawnDev.BlazorJS.JSObjects
@implements IAsyncDisposable

<div>
    <PageTitle>Matrix LED Display</PageTitle>
    <div>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <div style="width: 100%;">
                <RadzenMenu>
                    <RadzenMenuItem title="Connect MI Matrix Display" Text="Connect" Icon="add" Click="@(() => ConnectClick())" />
                </RadzenMenu>
            </div>
        </RadzenStack>
    </div>
    <div>
        <RadzenTabs RenderMode="TabRenderMode.Client" >
            <Tabs>
                <RadzenTabsItem Text="Test">
                    <div>
                        <select @onchange=SelectDisplay_OnChange style="min-width: 23rem;">
                            <option selected="@(_selectedDisplayDeviceIdHex == "")" value="">None</option>
                            @foreach (var display in DisplayService.Displays)
                            {
                                <option selected="@(_selectedDisplayDeviceIdHex == display.DeviceHexId)" value="@display.DeviceHexId">@display.DeviceHexId</option>
                            }
                        </select>
                        <button disabled="@(SelectedDisplay == null)" @onclick=Send>Send</button>
                    </div>
                    <div>
                        <textarea @bind=_textArea cols="50" rows="10"></textarea>
                    </div>
                    <div>
                        Status: @_testStatus
                    </div>
                </RadzenTabsItem>
                @foreach (var display in DisplayService.Displays)
                {
                    <RadzenTabsItem Text="@display.DeviceHexId">
                        <MatrixDisplayControl Display="@display" />
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
    </div>
</div>

@code
{
    [Inject]
    BlazorJSRuntime JS { get; set; } = default!;

    [Inject]
    MatrixLEDDisplayService DisplayService { get; set; } = default!;

    string bleState = "";
    bool isWebBluetoothEnabled = false;

    string _selectedDisplayDeviceIdHex = "";

    MIMatrixDisplay? SelectedDisplay;

    string _textArea = "";
    string _testStatus = "";

    void SelectDisplay_OnChange(ChangeEventArgs args)
    {
        var deviceIdHex = args.Value as string;
        var selectedDisplay = DisplayService.Displays.FirstOrDefault(o => o.DeviceHexId == deviceIdHex);
        SelectedDisplay = selectedDisplay;
        JS.Log("SelectedDisplay", SelectedDisplay?.DeviceHexId);
        StateHasChanged();
    }

    async Task Send()
    {
        try
        {
            if (SelectedDisplay == null || SelectedDisplay.LEDCharacteristic == null) return;
            var dataChunks = _textArea.Trim().Replace(" ", "").Replace("\r\n", "\n").Replace("\r", "\n").Split("\n", StringSplitOptions.RemoveEmptyEntries).Select(o => Convert.FromHexString(o));
            var totalBytes = dataChunks.Sum(o => o.Length);
            _testStatus = $"Sending {totalBytes} bytes";
            StateHasChanged();
            foreach (var dataChunk in dataChunks)
            {
                await SelectedDisplay.LEDCharacteristic.WriteValueWithoutResponse(dataChunk);
            }
            JS.Log("Send", SelectedDisplay?.DeviceHexId, _textArea);
            _testStatus = $"Sent {totalBytes} bytes";
        }
        catch (Exception ex)
        {
            _testStatus = $"Failed: {ex.Message}";
        }
        StateHasChanged();
    }

    void Display_OnStateChanged(MIMatrixDisplay display)
    {
        StateHasChanged();
    }
    void DisplayAdded(MIMatrixDisplay display)
    {
        display.OnStateChanged += Display_OnStateChanged;
        StateHasChanged();
    }
    void DisplayRemoved(MIMatrixDisplay display)
    {
        display.OnStateChanged -= Display_OnStateChanged;
        StateHasChanged();
    }
    async Task LoadPenguinImage(MIMatrixDisplay display, bool save)
    {
        await display.LoadImageFromURL("pixelart/penguin_16.png", save);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            DisplayService.OnDisplayAdded += DisplayAdded;
            DisplayService.OnDisplayRemoved += DisplayRemoved;
            using var navigator = JS.Get<Navigator>("navigator");
            using var bluetooth = navigator.Bluetooth;
            isWebBluetoothEnabled = bluetooth != null;
            if (!isWebBluetoothEnabled)
            {
                bleState = "Web Bluetooth not supported";
            }
            else
            {
                bleState = "Ready";
            }
            StateHasChanged();
        }
    }
    void ColorPicker(ChangeEventArgs args, MIMatrixDisplay display)
    {
        var newColor = args.Value as string;
        display.BackgroundColor.HexColor = newColor!;
    }
    bool _connecting = false;
    async Task ConnectClick()
    {
        if (_connecting || !isWebBluetoothEnabled) return;
        _connecting = true;
        bleState = "Connecting...";
        StateHasChanged();
        try
        {
            await DisplayService.ConnectDisplay();
        }
        finally
        {
            _connecting = false;
            bleState = "Ready";
            StateHasChanged();
        }
    }
    public async ValueTask DisposeAsync()
    {

    }
}