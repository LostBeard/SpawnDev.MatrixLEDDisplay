@page "/"
@using SpawnDev.BlazorJS
@using SpawnDev.BlazorJS.JSObjects
@using SpawnDev.MatrixLEDDisplay.Demo.Components
@implements IAsyncDisposable

<PageTitle>Matrix LED Display Demo</PageTitle>

<h1>Matrix LED Display Demo</h1>
<div>
    <img src="mi-matrix-display-400x334.png" width="48" />
</div>
<button disabled="@(!isWebBluetoothEnabled || _connecting)" @onclick=ConnectClick>Connect</button>
<p>BLE state: <strong><span style="color:#d13a30;">@bleState</span></strong></p>
<div>
    Images will be scaled to 16x16. 16x16 pixel art is recommended. Device will revert upon disconnect.
</div>

@foreach (var display in DisplayService.Displays)
{
    <div>
        <div>Name: @display.device?.Name</div>
        <div>
            <button disabled="@(!display.Connected)" @onclick=display.SendTestPicture>Load Test Image</button>
            <button disabled="@(!display.Connected)" @onclick=display.SelectAndLoadImage>Load Image File</button>
            <button @onclick=@(() => DisplayService.RemoveDisplay(display))>Remove</button>
        </div>
        <div>
            Gamma:<br/>
            <SpawnDev.MatrixLEDDisplay.UI.UISlider Min="0" Max="1" Value=@display.Gamma Change="@((v) => display.Gamma = v)"></SpawnDev.MatrixLEDDisplay.UI.UISlider>
        </div>
        <div>
            <LEDMatrix Data="display.Data"></LEDMatrix>
        </div>
    </div>
}

@code
{
    [Inject]
    BlazorJSRuntime JS { get; set; } = default!;

    [Inject]
    MatrixLEDDisplayService DisplayService { get; set; } = default!;

    string bleState = "";
    bool isWebBluetoothEnabled = false;

    void Display_OnStateChanged(MIMatrixDisplay display)
    {
        StateHasChanged();
    }
    void DisplayAdded(MIMatrixDisplay display)
    {
        display.OnStateChanged += Display_OnStateChanged;
        StateHasChanged();
    }
    void DisplayRemoved(MIMatrixDisplay display)
    {
        display.OnStateChanged -= Display_OnStateChanged;
        StateHasChanged();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            DisplayService.OnDisplayAdded += DisplayAdded;
            DisplayService.OnDisplayRemoved += DisplayRemoved;
            using var navigator = JS.Get<Navigator>("navigator");
            using var bluetooth = navigator.Bluetooth;
            isWebBluetoothEnabled = bluetooth != null;
            if (!isWebBluetoothEnabled)
            {
                bleState = "Web Bluetooth not supported";
            }
            else
            {
                bleState = "Ready";
            }
            StateHasChanged();
        }
    }
    bool _connecting = false;
    async Task ConnectClick()
    {
        if (_connecting || !isWebBluetoothEnabled) return;
        _connecting = true;
        bleState = "Connecting...";
        StateHasChanged();
        try
        {
            await DisplayService.ConnectDisplay();
        }
        finally
        {
            _connecting = false;
            bleState = "Ready";
            StateHasChanged();
        }
    }
    public async ValueTask DisposeAsync()
    {

    }
}